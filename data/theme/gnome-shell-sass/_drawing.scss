// Drawing mixins

// generic drawing of more complex things

@function _widget_edge($c:$borders_edge) {
// outer highlight "used" on most widgets
  @return 0 1px $c;
}

// provide font size in rem, with px fallback
@mixin fontsize($size: 24, $base: 16) {
  font-size: round($size) + pt;
  //font-size: ($size / $base) * 1rem;
}

@mixin _shadows($shadow1, $shadow2:none, $shadow3:none, $shadow4:none) {
//
// Helper function to stack up to 4 box-shadows;
//
  @if $shadow4!=none { box-shadow: $shadow1, $shadow2, $shadow3, $shadow4; }
  @else if $shadow3!=none { box-shadow: $shadow1, $shadow2, $shadow3; }
  @else if $shadow2!=none { box-shadow: $shadow1, $shadow2; }
  @else { box-shadow: $shadow1; }
}

// entries

@mixin entry($t, $fc:$selected_bg_color, $edge: $borders_edge) {
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, focus, insensitive
//

  @if $t==normal {
    background-color: $base_color;
    border-color: $borders_color;

  }
  @if $t==focus {
    border-color: if($fc==$selected_bg_color,
                     $selected_borders_color,
                     darken($fc,35%));
  }
  @if $t==hover { }
  @if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $insensitive_bg_color;
    box-shadow: none;
  }
}

// buttons

@function _border_color ($c) { @return darken($c,25%); } // colored buttons want
                                                         // the border form the
                                                         // base color

@function _text_shadow_color ($tc:$fg_color, $bg:$bg_color) {
//
// calculate the color of text shadows
//
// $tc is the text color
// $bg is the background color
//
  $_lbg: lightness($bg)/100%;
  @if lightness($tc)<50% { @return transparentize(white,1-$_lbg/($_lbg*1.3)); }
  @else { @return transparentize(black,$_lbg*0.8); }
}

@function _button_hilight_color($c) {
//
// calculate the right top hilight color for buttons
//
// $c: base color;
//
  @if lightness($c)>90% { @return white; }
  @else if lightness($c)>80% { @return transparentize(white, 0.3); }
  @else if lightness($c)>50% { @return transparentize(white, 0.5); }
  @else if lightness($c)>40% { @return transparentize(white, 0.7); }
  @else { @return transparentize(white, 0.9); }
}

@mixin _button_text_shadow ($tc:$fg_color, $bg:$bg_color) {
//
// helper function for the text emboss effect
//
// $tc is the optional text color, not the shadow color
//
// TODO: this functions needs a way to deal with special cases
//

  $_shadow: _text_shadow_color($tc, $bg);

  @if lightness($tc)<50% {
    text-shadow: 0 1px $_shadow;
    icon-shadow: 0 1px $_shadow;
  }
  @else {
    text-shadow: 0 -1px $_shadow;
    icon-shadow: 0 -1px $_shadow;
  }
}

@mixin button($t, $c:$bg_color, $tc:$fg_color, $edge: $borders_edge) {
//
// Button drawing function
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
//

  $_hilight_color: _button_hilight_color($c);
  $_button_edge: if($edge == none, none, _widget_edge($edge));
  $_blank_edge: if($edge == none, none, _widget_edge(transparentize($edge,1)));
  $_button_shadow: 0 1px 2px transparentize($shadow_color, 0.03);

  @if $t==normal {
  //
  // normal button
  //

    color: $tc;
    background-color: $c;
    border-color: $borders_color;
    box-shadow: $_button_shadow;
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;
  }
  @if $t==focus {
  //
  // focused button
  //  
    color: $tc;
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;
    box-shadow: inset 0px 0px 0px 2px $selected_bg_color;
    //border-color: $selected_bg_color;
  }

  @else if $t==hover {
  //
  // active osd button
  //
    color: $tc;
    border-color: $borders_color;
    background-color: $c;
    box-shadow: $_button_shadow;
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;

  }
  @else if $t==active {
  //
  // active osd button
  //
    color: $tc;
    border-color: $borders_color;
    background-color: $c;
    text-shadow: none;
    icon-shadow: none;
    box-shadow: none;
  }
  @else if $t==insensitive {

    color: $insensitive_fg_color;
    border-color: $insensitive_borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }
  @else if $t==undecorated {
  //
  // reset
  //
    border-color: transparent;
    background-color: transparent;
    background-image: none;

    @include _shadows(inset 0 1px transparentize(white,1),
                      $_blank_edge);

    text-shadow: none;
    icon-shadow: none;
  }
}

@mixin panel($t:normal) {
//
// Top panel drawing function
//
// $t: panel type,
//
// possible $t values:
// normal, noisy, dark, bright, window-near, overview, overview-noisy, login-screen, high-contrast
//

  $_opacity: 1;
  $_color: #ccc;
  $_highlight_color: $selected_fg_color;
  $_shadow: none;

  @if $t==noisy or $t==overview-noisy or $t==window-near or $t==high-contrast {
    .panel-button {
      &:active, &:focus {
        box-shadow: inset 0 -2px 0px lighten($selected_bg_color,5%);
      }
    }
  }
  @else if $t==normal or $t==dark or $t==overview or $t==login-screen {
    $_opacity: 0;
    $_color: #eee;
    $_highlight_color: white;
    $_shadow: 0px 1px 2px rgba(0, 0, 0, 0.9);

    .panel-button {
      &:active, &:focus {
        box-shadow: inset 0 -1px 0px white;
      }
    }
  }
  @else if $t==bright {
    $_opacity: 0;
    $_color: rgba(0, 0, 0, 0.75);
    $_highlight_color: black;
    $_shadow: 0px 1px 0px rgba(255, 255, 255, 0.15);

    .panel-button {
      &:active, &:focus {
        box-shadow: inset 0 -1px 0px darken($osd_bg_color, 10%);
      }
    }
  }

  background-color: rgba(0, 0, 0, $_opacity);

  .panel-button {
    color: $_color;
    text-shadow: $_shadow;

    .system-status-icon,
    .app-menu-icon > StIcon,
    .messages-indicator-icon,
    .popup-menu-arrow,
    .app-menu-spinner {
      color: $_color;
      icon-shadow: $_shadow;
    }

    &:hover, &:active, &:overview, &:focus, &:checked {
      color: $_highlight_color;

      .system-status-icon,
      .app-menu-icon > StIcon,
      .messages-indicator-icon,
      .popup-menu-arrow,
      .app-menu-spinner {
        color: $_highlight_color;
      }
    }
  }

  // We have to use opacity instead of background-color for the corner because
  // the corner uses custom drawing code that we animate manually.
  .panel-corner {
    opacity: 255 * $_opacity;
  }
}
